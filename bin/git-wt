#!/bin/bash
shopt -s extglob
shopt -s dotglob
# Script to create a bare repo for use with multiple worktrees that track remotes.
# Reference that was used to create this:
# https://stackoverflow.com/questions/54367011/git-bare-repositories-worktrees-and-tracking-branches
# https://morgan.cugerone.com/blog/workarounds-to-git-worktree-using-bare-repository-and-cannot-fetch-remote-branches/

trap exit ERR

if [ "$DEBUG" = "true" ]
then
  set -x
fi

usage() {
  echo "$0 <clone> <gitCommandOptions>"
}

cloneForWorkTrees() {
  gitCloneArgs=()
  while [[ "$1" != "--" ]] && [[ $# -gt 2 ]]; do
    gitCloneArgs+=("$1")
    shift
  done

  if [ "$1" = '--' ]; then
    gitCloneArgs+=("$1")
    shift
  fi
  if [[ ! "$1" =~ .*\.git ]]; then
    gitCloneArgs+=("$1")
    shift
  fi

  repoUrl=$1
  basename=${repoUrl##*/}
  name=${2:-${basename%.*}}

  shift $#
  set -- "${gitCloneArgs[@]}"

  echo "Creating directory $name as worktree root to bare clone"
  mkdir $name
  cd "$name"

  # core.worktreeBare=true - used as flag for custom git-prompt code
  git clone --config core.worktreeBare=true --bare $@ "$repoUrl" .bare
  echo "gitdir: .bare" > .git

  remoteName=$(git remote)

  git config remote.$remoteName.fetch "+refs/heads/*:refs/remotes/$remoteName/*"
  git fetch $remoteName
  git for-each-ref --format='%(refname:short)' refs/heads |  xargs -n1 -I{} git branch --set-upstream-to=$remoteName/{} {}
}

convertToWorkTreeStructure() {
  # git diff --quiet || { echo "Stash changes before doing this"; exit 24; }
  local currentWT=$(git rev-parse --abbrev-ref HEAD)
  # Set config options
  git config --local core.bare "true"
  git config --local core.worktreebare "true"

  # Create new directory structure
  mv .git .bare
  echo "gitdir: .bare" > .git
  #mkdir -p .bare/worktrees/$currentWT
  mkdir -p ${currentWT}TMP

  # Move files to WT appropriate locations
  mv -f !(.vscode|.git|.env|.bare|${currentWT}TMP) ${currentWT}TMP
  git worktree add ${currentWT}
  cp ${currentWT}/.git ${currentWT}TMP
  mv .bare/index .bare/worktrees/${currentWT}/index
  rm -rf ${currentWT}
  mv ${currentWT}TMP ${currentWT}
  git worktree repair ${currentWT}
}

customWorkTreeAdd() {
  gitWorkTreeAddArgs=()
  remainingArgs=()
  while [[ $# -gt 0 ]]; do
    case $1 in
      --*)
        gitWorkTreeAddArgs+=("$1")
        shift
      ;;
      -b|-B)
        gitWorkTreeAddArgs+=("$1")
        shift
        gitWorkTreeAddArgs+=("$1")
        shift
      ;;
      *)
        remainingArgs+=("$1")
        shift
      ;;
    esac
  done

  set -- "${remainingArgs[@]}"
  worktreeRoot=$(cd `git rev-parse --path-format=relative --git-common-dir`/.. && pwd)
  worktreeDir=$1
  shift
  git worktree add $gitWorkTreeAddArgs $worktreeRoot/$worktreeDir $@
  test -d $worktreeRoot/.vscode && ln -s $worktreeRoot/.vscode $worktreeRoot/$worktreeDir/.vscode
  test -f $worktreeRoot/.env && cp $worktreeRoot/.env $worktreeRoot/$worktreeDir/
}

isGitWorktreeCommand() {
  #worktreeCommands=$(git worktree 2>&1 | cut -d ':' -f 2 | sed 's/^ //g' | cut -d ' ' -f 3 | grep -ve '^$' | grep -qe "^$1$")
  git worktree 2>&1 | cut -d ':' -f 2 | sed 's/^ //g' | cut -d ' ' -f 3 | grep -ve '^$' | grep -qe "^$1$" || echo $1 | grep -qe "^repair$"
}

isMasterWT() {
  local currentWT=$(git rev-parse --show-toplevel)
  local masterWT=$(git worktree list --porcelain | awk '/worktree.*master/ {print}' | sed 's/worktree //')

  test $currentWT = $masterWT && echo "true" || echo "false"
}

changeWorktree() {
  cd $1
}

gitArgs=()
if [ $# -eq 0 ]
then
  usage
  exit 1
fi
git rev-parse > /dev/null

while [[ $# -gt 0 ]]; do
  case $1 in
    clone)
      shift
      cloneForWorkTrees $@
      shift $#
    ;;
    convert)
      convertToWorkTreeStructure
      shift
    ;;
    add)
      shift
      customWorkTreeAdd $@
      shift $#
    ;;
    switch)
      shift
      if [ -n "$1" ]
      then
        directory=$(git worktree list --porcelain | awk '/'"$1"'/ {print}' | grep worktree | sed 's/worktree //')
        test -n "${directory}" && echo " cd $directory" || echo "No directory found for worktree $1"
      else
        echo "Include worktree to swap to."
        exit 2
      fi
      shift $#
    ;;
    branch)
      shift
      defaultBranch=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
      inMasterWT=$(isMasterWT)
      if [ -n "$1" ]
      then
        if [ $inMasterWT = "true" ] && [ "$1" = "$defaultBranch" ]
        then
          echo "You are on master WT just refreshing current WT"
          git pull
        fi
        git fetch
        git checkout -b $1 --no-track origin/${defaultBranch}
        shift
      else
        echo "Provide a new branch name."
        exit 3
      fi
    ;;
    *)
      isGitWorktreeCommand $1
      if [ $? -eq 0 ]
      then
        git worktree $@
        shift $#
      else
        echo "Unknown command $1"
        usage
        exit 1
      fi
    ;;
  esac
done
